/* GULPFILE.JS CODE STARTS HERE */
/**
 * Include all required plugins
 */
var gulp = require('gulp'); // Gulp needed locally - sudo npm install gulp
var gulpLoadPlugins = require('gulp-load-plugins');
var plugins = gulpLoadPlugins({
	pattern : [ 'del', 'gulp-*', 'gulp.*', 'run-sequence'] // Some plugins don't have gulp prefix so we need to load them separately
});
var exec = require('child_process').exec; // This is required to execute command through gulp

/**
 * All args.XYZ are command line flags needs to be passed as '--XYZ value' -> When 'value' is blank XYZ's value is true
 */

/**
 * Command line options - defines whether this is a dev or release build
 * e.g gulp -r or gulp -d. (gulp --release or gulp --develop)
 * By default, just running 'gulp' is the same as running 'gulp -d'
 */
var args = require('yargs')
	.alias('r', 'release')
	.alias('d', 'develop')
	.default('release', false)
	.argv;

var release = args.release;
//TODO var dev = release ? false : true;

var releaseDirName = plugins.util.date('dd-mmm-yyyy');
console.log('Starting ' + plugins.util.colors.yellow(release ? 'RELEASE' : 'DEV') + ' build on ' + process.platform + ' platform');

/**
 * Paths defines source and destination directories
 */
var SOURCE_DIRECTORY = './mobile';
var BUILD_DIRECTORY = './www';

/**
 * Path of current ORGANIZATION build directory
 */
var APP_CONFIG_FILE,
	appConfig,
	IOS_BUILD_COMMAND,
	IOS_RUN_COMMAND,
	IOS_IPA_COMMAND,
	IPA_NAME,
	IPA_PATH,
	DEPLOY_COMMAND;
	
var	ANDROID_BUILD_COMMAND,
	ANDROID_RUN_COMMAND,
	ANDROID_APK_COMMAND,
	ANDROID_SIGNED_APK_COMMAND,
	APK_PATH,
	APK_NAME;

// Use "appConfig.json" to get name of our IPA file with the version and also use same details in config.xml, you can set you version number and other details here. 
/*{
	"appVersion" : "1.1.0",
	"appBuildVersion" : "1.1.0.1",
	"androidAppBuildVersion": "10001",
	"appId" : "<App Bundle ID>",
	"appName" : "<App Name>",
	"appDescription" : "<App Description>",
	"appAuthorEmail" : "<App Author Email>",
	"appAuthorURL": "<App Author URL>",
	"appAuthor" : "<App Author Name>" 
}*/
	
APP_CONFIG_FILE = './appConfig.json'; 
appConfig = require(APP_CONFIG_FILE);
var WINDOWS_POPUP = "msg * MESSAGE";
var MAC_POPUP = "osascript -e 'tell app \"System Events\" to display dialog \"MESSAGE\" with title \"SUCCESS\"'";

/**
 * IOS specific commands
 */
var IOS_BUILD_COMMAND = 'ionic cordova build ios';
var IOS_RUN_COMMAND = 'ionic cordova run ios';
var IOS_IPA_COMMAND = 'cordova build ios --device --release';

/**
 * IPA_PATH is path where IPA is generated by XCode
 */
var IPA_NAME = appConfig.appName + ".ipa"; // Name of our IPA
var IPA_PATH = "./platforms/ios/build/device/" + IPA_NAME; // path where IPA is generated by XCode

// command to deploy applicatin to testflight
var DEPLOY_COMMAND = 'fastlane deliver --ipa "' + IPA_PATH + '" --skip_metadata true --skip_screenshots true --force true';

/**
 * ANDROID specific commands
 */
ANDROID_BUILD_COMMAND = 'ionic cordova build android';
ANDROID_RUN_COMMAND = 'ionic cordova run android';
ANDROID_APK_COMMAND = 'cordova build android --release';
ANDROID_SIGNED_APK_COMMAND = 'cordova build android --release --buildConfig';
APK_PATH = './platforms/android/build/outputs/apk/android-release.apk'
APK_NAME = (appConfig.appName).replace(' ', '') + '_' + appConfig.appBuildVersion + '.apk';

// build app with different themes using runtime argument
// run command as "gulp --release --theme red/blue"
var theme = args.theme ? args.theme : 'blue'; // set default theme of application
var sourceScss = gulp.src([ SOURCE_DIRECTORY + '/themes/' + theme + '.scss' ]);


/**
 * Follwing paths are defined to be used in further gulp tasks.
 * Edit following paths as required
 */
var paths = {
	source : {
		sass : [ SOURCE_DIRECTORY + '/scss/*.scss' ],
		js : [ SOURCE_DIRECTORY + '/js/**/*.js'],
		lib : [ SOURCE_DIRECTORY + '/lib/**/*' ],
		templates : [ SOURCE_DIRECTORY + '/templates/**/*.html' ],
		images : [ SOURCE_DIRECTORY + '/img/**/*'],
		fonts : [ SOURCE_DIRECTORY + '/lib/ionic/fonts/*' ],
		index : [ SOURCE_DIRECTORY + '/index.html' ],
		i18n : [ SOURCE_DIRECTORY + '/i18n/*.json'],
		config_xml : [ SOURCE_DIRECTORY + '/config.xml' ]
	},
	build : {
		root : BUILD_DIRECTORY + '/',
		js : BUILD_DIRECTORY + '/js/',
		lib : BUILD_DIRECTORY + '/lib/',
		
		// set CSS files for the desktop run or the mobile run using "--localCss" flag from the command line
		css : args.localCss ? SOURCE_DIRECTORY + '/css/' : BUILD_DIRECTORY + '/css/',
		
		indexJs : BUILD_DIRECTORY + '/js/**/*.js',
		indexCss : BUILD_DIRECTORY + '/css/**/*.css',
		images : BUILD_DIRECTORY + '/img/',
		fonts : BUILD_DIRECTORY + '/font/',
		templatesJs : BUILD_DIRECTORY + '/js/',
		templates : BUILD_DIRECTORY + '/templates/',
		indexHtml : BUILD_DIRECTORY + '/index.html',
		i18n : BUILD_DIRECTORY + '/i18n/'
	},
	extensions : {
		minJs : '.min.js', // defines extension to be used for minified JS files
		minCss : '.min.css' // defines extension to be used for minified css files
	}
};

/**
 * Default task which runs 'Build' task
 * e.g. 'gulp' is the same as running 'gulp build'
 */
gulp.task('default', [ 'buildMobile' ]);


/**
 * Run ionic application in browser from mobile folder
 * for e.g. "http://localhost:7777/mobile" 
 */
connect = require('gulp-connect');
gulp.task('webserver', function() {
	connect.server({
		port : 7777,
		livereload : true
	});
});

/**
 * Main build task. Runs tasks in sequence where needed
 */
gulp.task('buildMobile', function(callback) {
	plugins.runSequence(
		'svn_update',
		'clean',
		'sass',
		'i18n',
		'config_xml',
		'js',
		'templatesMobile',
		'images',
		'fonts',
		'lib',
		'indexJs',
		'indexCss',
		'build_app',
		'releaseTask',
		callback
	);
});

/**
 * Update from SVN on Mac machine only
 */
var UPDATE_CODE_CMD = 'svn update'; // you can pass your own code update command here. for e.g "git pull origin master"
gulp.task('svn_update', function(cb) {
	if (args.svn) {
		console.log('Updating codebase...');
		execCMD(UPDATE_CODE_CMD, function(err) { 
			if (!err) {
				cb();
			}
		});
	} else {
		cb();
	}
})

/**
 * Clean build directory
 */
gulp.task('clean', function() {
	plugins.del.sync([ paths.build.root ]);
});

/**
 * SASS - buids the sass files
 */
gulp.task('sass', function() {
	return gulp.src(paths.source.sass)
		
		.pipe(plugins.inject(sourceScss, { // This can be used if you want to inject sass dynamically
			starttag : '/* inject:scss */',
			endtag : '/* endinject */',
			addRootSlash : false,
			transform : function(filePath) {
				return '@import "' + filePath + '";';
			}
		}))
		
		
		.pipe(plugins.sass())
		.pipe(plugins.minifyCss({
			keepSpecialComments : 0
		}))
		.pipe(plugins.rename({
			extname : paths.extensions.minCss
		}))
		.pipe(gulp.dest(paths.build.css));
});


/**
 * Copy all i18n files
 */
gulp.task('i18n', function() { // If you have localization JSON files
	return gulp.src(paths.source.i18n)
		.pipe(gulp.dest(paths.build.i18n));
});

/**
 * Config - set the right values in the PhoneGap config.xml
 */
gulp.task('config_xml', function() {
	return gulp.src(paths.source.config_xml)
		.pipe(plugins.cheerio({
			run : function($) {

				// set app version number
				$('widget').attr('version', appConfig.appVersion);

				// set build number for ios
				$('widget').attr('ios-CFBundleVersion', appConfig.appBuildVersion);

				// set build number for android
				$('widget').attr('android-versionCode', appConfig.androidAppBuildVersion);

				//set bundle identifier
				$('widget').attr('id', appConfig.appId);

				// set app name
				$('name').html(appConfig.appName);

				//set description
				$('description').html(appConfig.appDescription);

				//set author
				$('author').attr('email', appConfig.appAuthorEmail);
				$('author').attr('href', appConfig.appAuthorURL);
				$('author').html(appConfig.appAuthor);

				// set default html for app
				$('content').attr('src', 'index.html');
			},
			parserOptions : {
				xmlMode : true
			}
		}))
		.pipe(gulp.dest('./'));
});

/**
 * JavaScripts - minify and concatenate all js files
 */
gulp.task('js', function() { // minfies and concatenates all the JS files
	return gulp.src(paths.source.js)
		//.pipe(plugins.if(releasecache('js')) // Just used it
		.pipe(plugins.if(release, plugins.angularFilesort()))
		.pipe(plugins.if(release, plugins.ngAnnotate())) // insert dependency injection annotation
		.pipe(plugins.if(release, plugins.stripDebug()))
		.pipe(plugins.if(release, plugins.uglify()))
		.pipe(plugins.if(release, plugins.concat('app.min.js')))
		.pipe(gulp.dest(paths.build.js));
});

/**
 * templatesMobile - add all html templates into Angular's $templateCache using gulp-ng-html2js
 */
gulp.task('templatesMobile', function() {
	return gulp.src(paths.source.templates)
		.pipe(plugins.cached('templates'))
		.pipe(plugins.if(release, plugins.minifyHtml({
			empty : true,
			spare : true,
			quotes : true
		})))
		.pipe(plugins.if(release, plugins.ngHtml2js({
			moduleName : 'ionic-demo', // module name must be your angular module name
			prefix : 'templates/'
		})))
		.pipe(plugins.if(release, plugins.ngAnnotate()))
		.pipe(plugins.if(release, plugins.concat('templates.js')))
		.pipe(plugins.if(release, plugins.uglify()))
		.pipe(plugins.if(release, plugins.rename({
			extname : paths.extensions.minJs
		})))
		.pipe(plugins.if(release, gulp.dest(paths.build.templatesJs)))
		.pipe(plugins.if(!release, gulp.dest(paths.build.templates)));
});

/**
 * Images - copy images to build directory
 */
gulp.task('images', function() {
	return gulp.src(paths.source.images)
		.pipe(gulp.dest(paths.build.images));
});


/**
 * Fonts - copy fonts to build directory
 */
gulp.task('fonts', function() {
	return gulp.src(paths.source.fonts)
		.pipe(gulp.dest(paths.build.fonts));
});

/**
 * Copy all libraries
 */
gulp.task('lib', function() { // If you have some external files/plugins used then put minified version of all those plugins in lib folder. ionic.bundle.js too.
	return gulp.src(paths.source.lib)
		.pipe(gulp.dest(paths.build.lib));
});

/**
 * Index - inject all the output js files in build directory into index.html using gulp-inject
 */
gulp.task('indexJs', function() { // Add all JS files entry in index.html
	return gulp.src(paths.source.index)
		.pipe(plugins.inject(gulp.src([ paths.build.indexJs ])
			, {
				ignorePath : 'www',
				addRootSlash : false
			}))
		.pipe(gulp.dest(paths.build.root));
});

/**
 * Index - inject all the output css files in build directory into index.html using gulp-inject
 */
gulp.task('indexCss', function() { // Add all CSS files entry in index.html
	return gulp.src(paths.build.indexHtml)
		.pipe(plugins.inject(gulp.src(paths.build.indexCss, {
			read : false
		}), {
			ignorePath : 'www',
			addRootSlash : false
		}))
		.pipe(gulp.dest(paths.build.root));
});

/**
 * Build/Archive/Run/Deploy IOS applicationiosBuild
 */
gulp.task('build_app', function(cb) {
	/* IOS build task START */
	if (args.iosBuild) {
		console.log('Building ios application...');
		exec(IOS_BUILD_COMMAND,
			{
				cwd : './',
				maxBuffer : 1024 * 1024
			},
			function(err, stdout, stderr) {
				console.log(stdout);
				console.log(stderr);
				cb(err);
			})
	} else if (args.iosRun) {
		console.log('Running ios application...');
		exec(IOS_RUN_COMMAND,
			{
				cwd : './',
				maxBuffer : 1024 * 1024
			},
			function(err, stdout, stderr) {
				console.log(stdout);
				console.log(stderr);
				cb(err);
			})
	} else if (args.ipa || args.iosDeploy) {
		console.log('Building ipa...');
		plugins.util.log(plugins.util.colors.yellow("\nYou can use following command to deploy IPA on testflight once it is ready :\n", DEPLOY_COMMAND));
		exec(IOS_IPA_COMMAND,
			{
				cwd : './',
				maxBuffer : 1024 * 1024
			},
			function(err, stdout, stderr) {
				console.log(stdout);
				console.log(stderr);
				if (err) {
					cb(err);
				} else if (args.iosDeploy) {
					console.log('Deploying to itunes... please wait...')
					exec(DEPLOY_COMMAND,
						{
							cwd : './',
							maxBuffer : 1024 * 1024
						},
						function(err, stdout, stderr) {
							console.log(stdout);
							console.log(stderr);
							cb(err);
						});
				} else {
					cb();
				}
			});
	}
	/* IOS build task END */
	
	
	/* Android build task START */
	else if (args.androidBuild) {
		console.log('Building android application...');
		exec(ANDROID_BUILD_COMMAND,
			{
				cwd : './',
				maxBuffer : 1024 * 1024
			},
			function(err, stdout, stderr) {
				console.log(stdout);
				console.log(stderr);
				cb(err);
			})
	} else if (args.androidRun) {
		console.log('Running android application...');
		exec(ANDROID_RUN_COMMAND,
			{
				cwd : './',
				maxBuffer : 1024 * 1024
			},
			function(err, stdout, stderr) {
				console.log(stdout);
				console.log(stderr);
				cb(err);
			})
	} else if (args.signedAPK) {
		console.log('Building signed apk...');
		exec(ANDROID_SIGNED_APK_COMMAND,
			{
				cwd : './',
				maxBuffer : 1024 * 1024
			},
			function(err, stdout, stderr) {
				console.log(stdout);
				console.log(stderr);
				cb(err);
			});
	}
});


/**
 * Copy IPA to and zip source code
 */
gulp.task('releaseTask', function(callback) {
	if (args.signedAPK) {
		plugins.runSequence(
			'copyAPK',
			callback
		)
	} else if (args.ipa || args.iosDeploy) {
		plugins.runSequence(
			'copyIPA',
			callback
		)
	}
});

/**
 * Rename android apk
 */
gulp.task('copyAPK', function(callback) {
	return gulp.src(APK_PATH)
		.pipe(plugins.if(args.signedAPK, plugins.rename(APK_NAME)))
		.pipe(gulp.dest(releaseDirName + '/Android/'))
		.on('end', function() {
			plugins.util.log(plugins.util.colors.green('Good Job! Your APK is ready at following location : ') + plugins.util.colors.cyan(releaseDirName + '/Android/' + APK_NAME))
			execCMD(WINDOWS_POPUP.replace('MESSAGE', 'Good Job! Your APK is ready at following location : ' + releaseDirName + '/Android/' + APK_NAME), function(err) {})
		});
});

/**
 * Copy generated IPA
 */
gulp.task('copyIPA', function() {
	return gulp.src(IPA_PATH)
		.pipe(plugins.rename(appConfig.appName + '_' + appConfig.appBuildVersion + '.ipa'))
		.pipe(gulp.dest(releaseDirName + '/iOS/'))
		.on('end', function() {
			plugins.util.log(plugins.util.colors.green('Good Job! Your IPA is ready at following location : ') + plugins.util.colors.cyan(releaseDirName + '/iOS/' + IPA_NAME))
			execCMD(MAC_POPUP.replace('MESSAGE', 'Good Job! Your IPA is ready at following location : ' + releaseDirName + '/iOS/' + IPA_NAME), function(err) {})
		});
})


/**
 * Common function for executing commands
 * @param cmd
 * @param cb
 * @returns
 */
function execCMD(cmd, cb) {
	exec(cmd,
		{
			cwd : './',
			maxBuffer : 1024 * 1024
		},
		function(err, stdout, stderr) {
			console.log(stdout);
			console.log(stderr);
			if (err) {
				cb(err);
			} else {
				cb();
			}
		}
	);
}

/* GULPFILE.JS CODE ENDS HERE */